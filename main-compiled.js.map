{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":[";(function (window, document, d3, newssimData) {\n  'use strict';\n\n  // Monkey patching for ES7 array includes\n  Array.prototype.includes = function (element) {\n    return (this.indexOf(element) !== -1)\n  }\n\n  /**\n   * Get the frequencies of a keyword in a data on daily basis\n   * Days with no mentions are not included at all\n   * @param {string}    word: keyword to search\n   * @param {object}  data: database of content, arary of objects with content field\n   * @return {object}   in form of {20130202: 3,\n   *                                20130804: 2,\n   *                                ...}\n   */\n  function countWordByDay (word, data) {\n\n    let result = {}\n\n    for (let entry of data) {\n      if (entry.content.includes(word)) {\n        if (result[entry.publish_date]) {\n          result[entry.publish_date] += 1\n        } else {\n          result[entry.publish_date] = 1\n        }\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * Extract parts (year, month, or day) from a date string in the form of 20120823\n   * @param {string} dateString\n   * @returns {string[]}\n   */\n  function separateDateComponents(dateString) {\n    return [dateString.slice(0, 4),\n            dateString.slice(4, 6),\n            dateString.slice(6, 8)]\n  }\n\n  /**\n   * Aggregate word frequencies by week, month, or year\n   * @param {object} wordCounts\n   * @param {string} period\n   */\n  function aggregatePeriod (wordCounts, period = 'month') {\n\n    let result = {}\n\n    let key, getKey\n    if (period === 'year') {\n      getKey = (date) => date.slice(0, 4)\n    } else if (period === 'month') {\n      getKey = (date) => date.slice(0, 6)\n    } else if (period === 'day') {\n      getKey = (date) => date.slice(0, 8)\n    } else {\n      throw new Error('un-implemented period: ', period)\n    }\n\n    for (let date in wordCounts) if (wordCounts.hasOwnProperty(date)) {\n      key = getKey(date)\n\n      if (result[key]) {\n        result[key] += wordCounts[date]\n      } else {\n        result[key] = wordCounts[date]\n      }\n    }\n\n    return result\n  }\n\n\n  /**\n   * Input n and return '0n' if n < 0\n   * @param n\n   */\n  function padDatePart(n) {\n    if (n < 10) {\n      return '0' + n\n    } else {\n      return '' + n\n    }\n  }\n\n  function getDaysInMonth(month) {\n    let thirtyDaysMonth = [4, 6, 9, 11]\n    let thirtyoneDaysMonth = [1, 3, 5, 7, 8, 10, 12]\n\n    if (thirtyDaysMonth.includes(month)) {\n      return 30\n    } else if (thirtyoneDaysMonth.includes(month)) {\n      return 31\n    } else {\n      return 28\n    }\n\n    //FIXME: Wrong results on leap years\n\n  }\n\n  console.log(getDaysInMonth(1))\n\n  /**\n   * Return the intervals of two dates, for example, input '201408' and '201502'\n   * you get ['201408', '201409', '201410', '201411', '201412', '201501', '201502']\n   * @param {string} startDate\n   * @param {string} endDate\n   */\n  function getDateIntervals (startDate, endDate) {\n    if (startDate.length !== endDate.length) {\n      throw new Error('startDate and endDate have different length; aborting...')\n    }\n\n    let result = [];\n    let startYear, startMonth, startDay, endYear, endMonth, endDay\n    switch (startDate.length) {\n\n      // Years, like '2011' to '2015\n      case 4:\n        for (let i = +startDate; i <= +endDate; i += 1) {\n          result.push(i.toString())\n        }\n        break;\n\n      // Months, like '201104' to '201501'\n      case 6:\n\n        startYear = +startDate.slice(0, 4)\n        startMonth = +startDate.slice(4, 6)\n        endYear = +endDate.slice(0, 4)\n        endMonth = +endDate.slice(4, 6)\n\n        for (let year = startYear; year <= endYear; year += 1) {\n          for (let month = 1; month <= 12; month += 1) {\n\n            // First year: skip months before startMonth\n            if ((year === startYear) && (month < startMonth)) {\n              continue\n            }\n\n            // Last year: skip months after endMonth\n            if ((year === endYear) && (month > endMonth)) {\n              continue\n            }\n\n            result.push(year.toString() + padDatePart(month.toString()))\n          }\n        }\n\n        break;\n\n      // Days, like '20120401' to '20130801'\n      case 8:\n        startYear = +startDate.slice(0, 4)\n        startMonth = +startDate.slice(4, 6)\n        startDay = +startDate.slice(6, 8)\n        endYear = +endDate.slice(0, 4)\n        endMonth = +endDate.slice(4, 6)\n        endDay = +endDate.slice(6, 8)\n\n        for (let year = startYear; year <= endYear; year += 1) {\n          for (let month = 1; month <= 12; month += 1) {\n            for (let day = 1; day <= getDaysInMonth(month); day += 1) {\n\n              // First year: skip months before startMonth\n              if ((year === startYear) && (month < startMonth)) {\n                continue\n              }\n\n              // Last year: skip months after endMonth\n              if ((year === endYear) && (month > endMonth)) {\n                continue\n              }\n\n              // First year and first month: skip days before startDay\n              if ((year === startYear) && (month === startMonth) && (day < startDay)) {\n                continue\n              }\n\n              // last year and last month: skip days after startDay\n              if ((year === endYear) && (month === endMonth) && (day > endDay)) {\n                continue\n              }\n\n              result.push('' + year + padDatePart(month) + padDatePart(day))\n            }\n          }\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unrecognized date format: ${startDate}`)\n    }\n\n    return result\n  }\n\n  /**\n   * Transform data in form of {'201404': 32, '201408': 6} into an array like\n   * [{period: '201404', value: 32},\n   *  {period: '201406', value:  0},\n   *  {period: '201407', value:  0},\n   *  {period: '201408', value:  6}]\n   * @param {object} data\n   */\n  function transformToArray (data) {\n\n    // First step: add zeros to the gaps lacking data\n\n  }\n\n  console.log(transformToArray({'201404': 32, '201408': 6}))\n\n  // Hide loading notice\n  const loadingNotice = document.getElementsByClassName('loading-notice')[0]\n  loadingNotice.parentNode.removeChild(loadingNotice)\n\n  // Get DOM elements\n  const btnConfirm = document.getElementsByClassName('btnConfirm')[0]\n  const keywordInput = document.getElementsByClassName('keywordInput')[0]\n  const dataDisplay = document.getElementById('display')\n\n  btnConfirm.addEventListener('click', (event) => {\n    let searchResult = aggregatePeriod(countWordByDay(keywordInput.value, newssimData), 'month')\n    let resultLine\n    let bar\n    dataDisplay.innerHTML = ''\n  })\n\n})(window, window.document, window.d3, window.newssim_db)"]}